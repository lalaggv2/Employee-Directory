{"version":3,"sources":["components/Header.js","components/Table/Table-header.js","components/Table/Table-row.js","components/Table/Table.js","components/Search-form.js","App.js","serviceWorker.js","index.js"],"names":["Header","TableHeader","headings","sort","map","item","onClick","TableRow","props","imgSrc","name","gender","birthday","email","phone","src","alt","Table","users","className","dateStr","Date","dob","date","toLocaleDateString","picture","thumbnail","first","last","SearchForm","onChange","filter","type","placeholder","App","useState","setUsers","filteredUsers","setFilteredUsers","fetch","then","res","json","results","console","log","e","term","target","value","toLowerCase","filteredResults","x","includes","length","field","sortedUsers","slice","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc8f7810.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../components/Table/table.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1>Employee Database</h1>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n// import './Table.css';\r\n\r\nfunction TableHeader({ headings, sort }) {\r\n  return (\r\n    <thead>\r\n      {headings && (\r\n        headings.map(item => {\r\n          return <th onClick={() => sort(item)}>{item}</th>\r\n        })\r\n      )}\r\n    </thead>\r\n  );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport './table.css';\r\n\r\nfunction TableRow(props) {\r\n  const { imgSrc,\r\n    name,\r\n    gender,\r\n    birthday,\r\n    email,\r\n    phone } = props\r\n  //console.log(imgSrc)\r\n  return (<tr>\r\n    <td><img src={imgSrc} alt={name} /></td>\r\n    <td>{name}</td>\r\n    <td>{gender}</td>\r\n    <td>{birthday}</td>\r\n    <td>{email}</td>\r\n    <td>{phone}</td>\r\n  </tr>\r\n  );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useState } from 'react';\r\nimport TableHeader from './Table-header';\r\nimport TableRow from './Table-row';\r\nimport './table.css';\r\n\r\nfunction Table(props) {\r\n  const { users } = props\r\n  return (\r\n    <div className=\"uk-container table-container\">\r\n      <table className=\"uk-table uk-table-striped table\">\r\n        {/* <table className='table'> */}\r\n        <TableHeader sort={props.sort} headings={['', 'Name', 'Gender', 'Birthday', 'Email', 'Phone']} />\r\n        {\r\n          users && (\r\n            users.map(item => {\r\n              let date = new Date(item.dob.date);\r\n              let dateStr = date.toLocaleDateString();\r\n\r\n              return <TableRow imgSrc={item.picture.thumbnail}\r\n                name={`${item.name.first} ${item.name.last}`}\r\n                gender={item.gender}\r\n                birthday={dateStr}\r\n                email={item.email}\r\n                phone={item.phone} />\r\n            })\r\n          )\r\n        }\r\n      </table >\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","\r\nimport React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <div className=\"uk-container form-container\">\r\n      {/* <form> */}\r\n      <div className=\"uk-margin\">\r\n        <label>Search Employee by Name:</label><br />\r\n        <input\r\n          onChange={props.filter}\r\n          className=\"input-box uk-input uk-form-width-medium\" type=\"text\"\r\n          placeholder=\"Employee Name\"\r\n        />\r\n      </div>\r\n      {/* </form> */}\r\n    </div>\r\n  )\r\n};\r\n\r\n// handleInputChange = event => {\r\n//   // Getting the value and name of the input which triggered the change\r\n//   const { name, value } = event.target;\r\n\r\n//   // Updating the input's state\r\n//   this.setState({\r\n//     [name]: value\r\n//   });\r\n// };\r\n\r\n\r\nexport default SearchForm;","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Table from './components/Table/Table';\nimport SearchForm from './components/Search-form';\n\nfunction App() {\n\n  const [users, setUsers] = useState(null);\n  const [filteredUsers, setFilteredUsers] = useState(null);\n  if (!users) {\n\n    fetch('https://randomuser.me/api/?results=30')\n      .then(res => {\n        res.json().then(json => {\n          //console.log(json)\n          setUsers(json.results)\n          console.log(json.results)\n        })\n      })\n  }\n\n  const filter = (e) => {\n    const term = e.target.value.toLowerCase();\n    const filteredResults = users.filter(x => {\n      return (x.name.first.toLowerCase().includes(term) || x.name.last.toLowerCase().includes(term))\n    });\n    console.log(filteredResults);\n    if (filteredResults.length > 0) {\n      setFilteredUsers(filteredResults)\n    }\n  }\n\n  const sort = (e) => {\n    const field = e.toLowerCase()\n    let sortedUsers = users.slice(0)\n    console.log(field)\n    sortedUsers.sort((a, b) => {\n      console.log(a[field])\n      if (field === 'name') {\n        return a.name.first < b.name.first\n      } else if (field === 'birthday') {\n        return a.dob.date < b.dob.date\n      } else {\n        return a[field] > b[field]\n      }\n    })\n    console.log(sortedUsers)\n    setUsers(sortedUsers)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <SearchForm filter={filter} />\n      <Table sort={sort} users={filteredUsers ? filteredUsers : users} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}